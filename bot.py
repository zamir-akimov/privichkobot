import logging
import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, JobQueue

# –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "YOUR_BOT_TOKEN_HERE"

# –¢–µ–∫—Å—Ç—ã —Ä–∏—Ç—É–∞–ª–æ–≤
MORNING_TEXT = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç –≤–∞—à —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª. ‚òÄÔ∏è"
EVENING_TEXT = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –í–æ—Ç –≤–∞—à –≤–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª. üåô"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
keyboard = [
    [KeyboardButton("–£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª"), KeyboardButton("–í–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª")],
    [KeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")]
]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_habits = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

def start(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∏—Ç—É–∞–ª –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É:", reply_markup=markup)

def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    text = update.message.text
    chat_id = update.message.chat_id

    if text == "–£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª":
        update.message.reply_text(MORNING_TEXT)
    elif text == "–í–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª":
        update.message.reply_text(EVENING_TEXT)
    elif text == "–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É":
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
        context.user_data["awaiting_habit"] = True
    elif "awaiting_habit" in context.user_data:
        context.user_data["habit_description"] = text
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
        context.user_data.pop("awaiting_habit")
        context.user_data["awaiting_time"] = True
    elif "awaiting_time" in context.user_data:
        try:
            habit_time = datetime.datetime.strptime(text, "%H:%M").time()
            user_habits[chat_id] = (context.user_data["habit_description"], habit_time)
            update.message.reply_text(f"–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç –≤–∞–º –≤ {habit_time}. ‚úÖ")
            context.user_data.pop("awaiting_time")
            schedule_habit_reminder(context, chat_id, context.user_data["habit_description"], habit_time)
        except ValueError:
            update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")

def schedule_habit_reminder(context: CallbackContext, chat_id: int, habit_description: str, habit_time: datetime.time):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    now = datetime.datetime.now()
    reminder_datetime = datetime.datetime.combine(now.date(), habit_time)
    if reminder_datetime < now:
        reminder_datetime += datetime.timedelta(days=1)

    delay = (reminder_datetime - now).total_seconds()
    context.job_queue.run_once(send_habit_reminder, delay, context={"chat_id": chat_id, "habit_description": habit_description})

def send_habit_reminder(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    job_data = context.job.context
    context.bot.send_message(chat_id=job_data["chat_id"], text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job_data['habit_description']}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    job_queue = updater.job_queue

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
